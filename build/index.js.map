{"version":3,"sources":["index.js","test.js"],"names":["require","fs","qs","stream","Buffer","model","hamt","obs","worker","cof","cob","curry","batch","c","concatter","filtering","mapping","pf","rAF","vdom","log","cookie","key","undefined","val","context","req","headers","ck","split","map","trim","filter","length","reduce","acc","res","setHeader","Object","keys","k","clearCookie","assign","sendFile","s","statusCode","addMIME","file","streamable","pipe","zlib","createGzip","createReadStream","benchmark","before","Date","on","after","console","url","message","body","ctx","Promise","rej","buf","setEncoding","Resolve","i","toString","x","Readable","read","size","push","slice","send","e","buffer","code","end","from","JSON","stringify","match","createDeflate","route","action","__handled","headersSent","method","toLowerCase","type","reggie","replace","r","RegExp","indexOf","v","exec","params","query","parse","get","put","post","del","patch","serve","folder","filepath","process","cwd","y","n","stat","err","stats","isFile","server","port","useCluster","http","createServer","listen","error","pid","cluster","numCPUs","cpus","isMaster","fork","signal","module","hot","accept","start","maybe","Math","random","setTimeout"],"mappings":"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","file":"","sourcesContent":["const zlib = require('zlib')\n\t, fs = require('fs')\n\t, qs = require('querystring')\n\t, stream = require('stream')\n\t, Buffer = require('buffer').Buffer\n\t, { model, hamt, obs, worker, cof, cob, curry, batch, c, concatter, filtering, mapping, pf, rAF, vdom } = require('clan-fp')\n\nconst log = (...a) => console.log(...a)\n\n// cookie middleware\nexport const cookie = context => {\n\tconst c = (key=undefined, val=undefined) => {\n\t\t\tlet {headers={}} = context.req\n\t\t\t\t, {cookie=''} = headers\n\t\t\t\t, ck = cookie\n\t\t\t\t\t.split(';')\n\t\t\t\t\t.map(c => c.trim())\n\t\t\t\t\t.filter(c => c.length !== 0)\n\t\t\t\t\t.reduce((acc, c) => {\n\t\t\t\t\t\tlet [key,val] = c.split('=').map(c => c.trim())\n\t\t\t\t\t\tacc[key] = val\n\t\t\t\t\t\treturn acc\n\t\t\t\t\t}, {})\n\n\t\t\tif(key !== undefined) {\n\t\t\t\tif(val === undefined) delete ck[key]\n\t\t\t\telse ck[key] = val\n\n\t\t\t\tcontext.res.setHeader('Set-Cookie', Object.keys(ck).map(k => `${k}=${ck[k]}`))\n\t\t\t}\n\t\t\treturn ck\n\t\t}\n\t\t, clearCookie = () => context.res.setHeader('Set-Cookie', '')\n\n\treturn Object.assign({}, context, {cookie: c, clearCookie})\n}\n\n// send gzipped file\nexport const sendFile = context => {\n\tconst s = file => {\n\t\tconst {req, res} = context\n\t\tres.statusCode = 200\n\t\taddMIME(file, res)\n\t\tfile instanceof Buffer\n\t\t\t? streamable(file).pipe(zlib.createGzip()).pipe(res)\n\t\t\t: fs.createReadStream(file).pipe(zlib.createGzip()).pipe(res)\n\t}\n\n\treturn Object.assign({}, context, {sendFile: s})\n}\n\n// benchmark handler\nexport const benchmark = message => context => {\n\tlet before = +new Date\n\tcontext.res.on('finish', () => {\n\t\tlet after = +new Date\n\t\tconsole.log(req.url + ' --- ' + (message ? message+':' : '', after-before+'ms'))\n\t})\n\treturn context\n}\n\n// parse data streams from req body\nexport const body = (ctx) => {\n\tctx.body = new Promise((res,rej) => {\n\t\tlet {req} = ctx\n\t\tlet buf = ''\n\t\treq.setEncoding('utf8')\n\t\treq.on('data', c => buf += c)\n\t\treq.on('end', _ => {\n\t\t\tctx.body = () => Promise.Resolve(buf)\n\t\t\tres(buf)\n\t\t})\n\t})\n\treturn ctx\n}\n\nconst streamable = buf => {\n    let i = 0\n    \t, s = buf.toString()\n    \t, x = new stream.Readable({\n\t    \tread(size) {\n\t    \t\tif(i < s.length) {\n\t\t    \t\tthis.push(s.slice(i,i+size))\n\t\t    \t\ti = i+size\n\t\t    \t} else {\n\t\t    \t\tthis.push(null)\n\t\t    \t}\n\t    \t}\n\t    })\n    return x\n}\n\n// send gzipped response middleware\nexport const send = context => {\n\tconst { req, res } = context\n\t\t, e = req.headers['accept-encoding'] || ''\n\t\t, s = (buffer, code=200) => {\n\t\t\tif(typeof buffer === 'number') {\n\t\t\t\tres.statusCode = buffer\n\t\t\t\treturn res.end('')\n\t\t\t} else {\n\t\t\t\tres.statusCode = code\n\t\t\t}\n\n\t\t\tif(!(buffer instanceof Buffer))\n\t\t\t\tbuffer = Buffer.from(typeof buffer === 'object' ? JSON.stringify(buffer) : buffer)\n\n\t\t\tbuffer = streamable(buffer)\n\n\t\t\tif(e.match(/gzip/)) {\n\t\t\t\tres.setHeader('content-encoding', 'gzip')\n\t\t\t\tbuffer.pipe(zlib.createGzip()).pipe(res)\n\t\t\t} else if(e.match(/deflate/)) {\n\t\t\t\tres.setHeader('content-encoding', 'deflate')\n\t\t\t\tbuffer.pipe(zlib.createDeflate()).pipe(res)\n\t\t\t} else {\n\t\t\t\tbuffer.pipe(res)\n\t\t\t}\n\t\t}\n\n\treturn Object.assign({}, context, {send: s})\n}\n\n// routing middleware\nexport const route = type => (url, action) => context => {\n\tif(context.__handled || context.res.headersSent || context.req.method.toLowerCase() !== type) return\n\n\tconst {req, res} = context\n\t\t, reggie = url.replace(/\\/\\{((\\w*)(\\??))\\}/ig, '\\/?(\\\\w+$3)')\n\t\t, r = RegExp(`^${reggie}$`)\n\t\t, i = req.url.indexOf('?')\n\t\t, v = r.exec(i === -1 ? req.url : req.url.slice(0,i))\n\n\tif(!!v) {\n\t\tcontext.__handled = true\n\n\t\tconst params = v.slice(1)\n\t\t\t, query = qs.parse(req.url.slice(i+1))\n\n\t\taction(Object.assign({}, context, {params, query}))\n\t}\n\n\treturn context\n}\nexport const get = route('get')\nexport const put = route('put')\nexport const post = route('post')\nexport const del = route('delete')\nexport const patch = route('patch')\n\n// static file serving async-middleware\nexport const serve = (folder='./', route='/') => context => {\n\tconst {req, res} = context\n\t\t, {url} = req\n\t\t, filepath = `${process.cwd()}/${folder}/${url.slice(1).replace(new RegExp(`/^${route}/`,`ig`), '')}`.replace(/\\/\\//ig, '/')\n\t\t, e = req.headers['accept-encoding'] || ''\n\n\treturn new Promise((y, n) =>\n\t\tfs.stat(filepath, (err, stats) => {\n\t\t\tif(!err && stats.isFile()){\n\t\t\t\taddMIME(url, res)\n\n\t\t\t\tif(e.match(/gzip/)) {\n\t\t\t\t\tres.setHeader('content-encoding', 'gzip')\n\t\t\t\t\tfs.createReadStream(filepath).pipe(zlib.createGzip()).pipe(res)\n\t\t\t\t} else if(e.match(/deflate/)) {\n\t\t\t\t\tres.setHeader('content-encoding', 'deflate')\n\t\t\t\t\tfs.createReadStream(filepath).pipe(zlib.createDeflate()).pipe(res)\n\t\t\t\t} else {\n\t\t\t\t\tfs.createReadStream(filepath).pipe(res)\n\t\t\t\t}\n\n\t\t\t\tn(context)\n\t\t\t} else {\n\t\t\t\ty(context)\n\t\t\t}\n\t\t}))\n}\n\nconst addMIME = (url, res, type) => {\n\turl.match(/\\.js$/) && res.setHeader('Content-Type', 'text/javascript')\n\turl.match(/\\.json$/) && res.setHeader('Content-Type', 'application/json')\n\turl.match(/\\.pdf$/) && res.setHeader('Content-Type', 'application/pdf')\n\turl.match(/\\.html$/) && res.setHeader('Content-Type', 'text/html')\n\turl.match(/\\.css$/) && res.setHeader('Content-Type', 'text/css')\n\n\turl.match(/\\.jpe?g$/) && res.setHeader('Content-Type', 'image/jpeg')\n\turl.match(/\\.png$/) && res.setHeader('Content-Type', 'image/png')\n\turl.match(/\\.gif$/) && res.setHeader('Content-Type', 'image/gif')\n}\n\nexport const server = (pipe, port=3000, useCluster=false) => {\n\tconst http = require('http')\n\n\tif(!useCluster)\n\t\treturn http\n\t\t\t.createServer((req, res) => pipe({req, res}))\n\t\t\t.listen(port, (err) =>\n\t\t\terr\n\t\t\t\t&& console.error(err)\n\t\t\t\t|| console.log(`Server running at :${port} on process ${process.pid}`))\n\n\tconst cluster = require('cluster')\n\t\t, numCPUs = require('os').cpus().length\n\n\tif (cluster.isMaster) {\n\t\tfor (var i = 0; i < numCPUs; i++) cluster.fork()\n\t\tcluster.on('exit', (worker, code, signal) =>\n\t\t\tconsole.log(`worker ${worker.process.pid} died`))\n\t} else {\n\t\tconst s = http.createServer((req, res) => pipe({req, res}))\n\t\ts.listen(port, (err) =>\n\t\t\terr\n\t\t\t\t&& console.error(err)\n\t\t\t\t|| console.log(`Server running at :${port} on process ${process.pid}`))\n\t}\n}\n\nexport const http = server","import {server, cookie, send, sendFile, serve, gzip, route, get, put, post, patch, del} from './server'\nimport {obs} from 'clan-fp'\n\nif(module.hot){\n\tmodule.hot.accept()\n}\n\nconst log = (...a) => console.log(...a)\n\nconst benchmark = message => context => {\n\tlet before = +new Date\n\tcontext.res.on('finish', () => {\n\t\tlet after = +new Date\n\t\tconsole.log(message ? message+':' : '', after-before+'ms')\n\t})\n\treturn context\n}\n\n// observables have methods: map, reduce, filter, then, maybe, union, from, take, takeWhile, debounce, stop\n\nconst start = obs()\n\nstart\n\t.map(benchmark())\n\t.map(send)\n\t.map(cookie)\n\t.map(gzip)\n\t.maybe(serve('src'))[0]\n\t.map(get('/'\n\t\t, ctx => {\n\t\t\ttry{\n\t\t\t\tctx.send('hello world')\n\t\t\t}catch(e){ log(e) }\n\t\t}))\n\t.map(get('/api', c => c.send('api page '+Math.random())))\n\t.map(get('/notes', c => c.send(`main notes page`)))\n\t.map(get('/notes/{id}', c => c.send(`notes page - ${c.params[0]}`)))\n\t.map(get('/github/{username}', async c => {\n\t\tawait new Promise(res => setTimeout(() => res(), 1500))\n\t\tc.send('some test JSON'.split(' '))\n\t}))\n\t.map(get('.*', c => c.send(404)))\n\nserver(start)\n\n// you can make middleware, sync or async\n// sync\n\n// start.map(context => {\n// \treturn {...context, name: getRandomName()}\n// })\n\n// side-effects (i.e. for analytics)\n// start\n// \t.then(context => {\n// \t\tsendAnalyticsToCustom()\n// \t})\n// \t.then(context => {\n// \t\tsendAnalyticsToGoogle()\n// \t})\n\n// async (check for login?)\n// let [isLoggedIn, isAnonymous] =\n// \tstart\n// \t\t.maybe(context => newPromise((res, rej) => {\n// \t\t\tredis.get(context.req.cookie.sesssionId, (err, val) =>\n// \t\t\t\terr && rej(context) || res(context))\n// \t\t}))\n\n// \tisLoggedIn\n// \t\t.map(get('/account', ({send}) => send('your account')))\n\n// \tisAnonymous\n// \t\t.then(context => context.res.redirect('/login'))"]}